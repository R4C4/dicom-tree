/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Image,
} from './model/Image';
import {
  Patient,
} from './model/Patient';
import {
  Series,
} from './model/Series';
import {
  Study,
} from './model/Study';

export namespace Components {
  interface DicomApp {
    'getSelectedFiles': () => Promise<Uint8Array[][]>;
    'loadFiles': (fileBuffer: any) => Promise<void>;
  }
  interface FolderSelect {}
  interface ImageView {
    'image': Image;
  }
  interface PatientView {
    'patient': Patient;
  }
  interface SeriesView {
    'series': Series;
  }
  interface StudyView {
    'study': Study;
  }
  interface TreeNode {
    'down': boolean;
  }
}

declare global {


  interface HTMLDicomAppElement extends Components.DicomApp, HTMLStencilElement {}
  var HTMLDicomAppElement: {
    prototype: HTMLDicomAppElement;
    new (): HTMLDicomAppElement;
  };

  interface HTMLFolderSelectElement extends Components.FolderSelect, HTMLStencilElement {}
  var HTMLFolderSelectElement: {
    prototype: HTMLFolderSelectElement;
    new (): HTMLFolderSelectElement;
  };

  interface HTMLImageViewElement extends Components.ImageView, HTMLStencilElement {}
  var HTMLImageViewElement: {
    prototype: HTMLImageViewElement;
    new (): HTMLImageViewElement;
  };

  interface HTMLPatientViewElement extends Components.PatientView, HTMLStencilElement {}
  var HTMLPatientViewElement: {
    prototype: HTMLPatientViewElement;
    new (): HTMLPatientViewElement;
  };

  interface HTMLSeriesViewElement extends Components.SeriesView, HTMLStencilElement {}
  var HTMLSeriesViewElement: {
    prototype: HTMLSeriesViewElement;
    new (): HTMLSeriesViewElement;
  };

  interface HTMLStudyViewElement extends Components.StudyView, HTMLStencilElement {}
  var HTMLStudyViewElement: {
    prototype: HTMLStudyViewElement;
    new (): HTMLStudyViewElement;
  };

  interface HTMLTreeNodeElement extends Components.TreeNode, HTMLStencilElement {}
  var HTMLTreeNodeElement: {
    prototype: HTMLTreeNodeElement;
    new (): HTMLTreeNodeElement;
  };
  interface HTMLElementTagNameMap {
    'dicom-app': HTMLDicomAppElement;
    'folder-select': HTMLFolderSelectElement;
    'image-view': HTMLImageViewElement;
    'patient-view': HTMLPatientViewElement;
    'series-view': HTMLSeriesViewElement;
    'study-view': HTMLStudyViewElement;
    'tree-node': HTMLTreeNodeElement;
  }
}

declare namespace LocalJSX {
  interface DicomApp {}
  interface FolderSelect {
    'onFilesLoaded'?: (event: CustomEvent<any>) => void;
  }
  interface ImageView {
    'image'?: Image;
  }
  interface PatientView {
    'patient'?: Patient;
  }
  interface SeriesView {
    'onSeriesSelected'?: (event: CustomEvent<any>) => void;
    'series'?: Series;
  }
  interface StudyView {
    'onStudySelected'?: (event: CustomEvent<any>) => void;
    'study'?: Study;
  }
  interface TreeNode {
    'down'?: boolean;
  }

  interface IntrinsicElements {
    'dicom-app': DicomApp;
    'folder-select': FolderSelect;
    'image-view': ImageView;
    'patient-view': PatientView;
    'series-view': SeriesView;
    'study-view': StudyView;
    'tree-node': TreeNode;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'dicom-app': LocalJSX.DicomApp & JSXBase.HTMLAttributes<HTMLDicomAppElement>;
      'folder-select': LocalJSX.FolderSelect & JSXBase.HTMLAttributes<HTMLFolderSelectElement>;
      'image-view': LocalJSX.ImageView & JSXBase.HTMLAttributes<HTMLImageViewElement>;
      'patient-view': LocalJSX.PatientView & JSXBase.HTMLAttributes<HTMLPatientViewElement>;
      'series-view': LocalJSX.SeriesView & JSXBase.HTMLAttributes<HTMLSeriesViewElement>;
      'study-view': LocalJSX.StudyView & JSXBase.HTMLAttributes<HTMLStudyViewElement>;
      'tree-node': LocalJSX.TreeNode & JSXBase.HTMLAttributes<HTMLTreeNodeElement>;
    }
  }
}


